version: "3"
services:
  local-stack-aws:
    image: localstack/localstack:0.14.0
    networks:
      - hmpps
    container_name: local-stack-aws
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sns,sqs
      - DEBUG=${DEBUG- }
      - DATA_DIR=${DATA_DIR- }
      - PORT_WEB_UI=${PORT_WEB_UI- }
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_EXECUTION_ENV=True
      - DEFAULT_REGION=eu-west-2
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  hmpps-auth:
    image: quay.io/hmpps/hmpps-auth:latest
    networks:
      - hmpps
    container_name: hmpps-auth
    ports:
      - "9090:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/health" ]
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - APPLICATION_AUTHENTICATION_UI_ALLOWLIST=0.0.0.0/0

  manage-users-api:
    image: quay.io/hmpps/hmpps-manage-users-api:latest
    networks:
      - hmpps
    container_name: manage-users-api_mhaa
    depends_on:
      - hmpps-auth
    ports:
      - "9091:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=dev
      - HMPPS_AUTH_ENDPOINT_URL=http://hmpps-auth:8080/auth
      - EXTERNAL_USERS_ENDPOINT_URL=http://hmpps-external-users-api:8080

  hmpps-subject-access-request-api:
    build:
      context: .
    container_name: hmpps-subject-access-request-api
    ports:
      - "8081:8080"
    depends_on:
      hmpps-auth:
        condition: service_healthy
      manage-users-api:
        condition: service_healthy
    networks:
      - hmpps
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ping"]
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=dev
      - DATABASE_ENDPOINT=db:5432
      - DATABASE_NAME=postgres
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
  db:
    container_name: subject-access-request-db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
    ports:
      - '5432:5432'
    networks:
      - db-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./db/dev/schema.sql:/docker-entrypoint-initdb.d/1-dev-database.sql
      - ./db/dev/roles.sql:/docker-entrypoint-initdb.d/2-dev-roles.sql

networks:
  hmpps:
  db-network: